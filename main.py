import asyncio
import html
import os
import pickle
import platform
from collections import deque, defaultdict
from io import BytesIO
from urllib.parse import urlparse

import aiofiles
import aiohttp
import ffmpeg
from PIL import Image
from dotenv import load_dotenv
from telegram import Bot, InputMediaPhoto, InputMediaVideo
from telegram.request import HTTPXRequest

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
TAGS_34 = os.getenv("TAGS_34", "").split(",")
WEBSITE_34 = os.getenv("WEBSITE_34")
POST_URL_34 = os.getenv("POST_URL_34")

HEADERS = {"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36"}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram
LIMIT_CAPTION = 1024  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º
LIMIT_TEXT_MSG = 4096  # –õ–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ª–µ–≥—Ä–∞–º–º
MAX_MEDIA_PER_GROUP = 10  # –õ–∏–º–∏—Ç Telegram –Ω–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É
MAX_SIZE_IMG_MB = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–æ—Ç–æ –≤ MB
MAX_SIZE_VIDEO_MB = 50  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∏–¥–µ–æ –≤ MB


# –°–ø–∏—Å–∫–∏
LIMIT = 40 #–õ–∏–º–∏—Ç –ø—Ä–æ–≥—Ä—É–∑–∫–∏ –ø–æ—Å—Ç–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É —Ç–µ–≥—É
DATA_FOLDER = "temp_data"  # –ü–∞–ø–∫–∞ –≥–¥–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
SAVE_FILE = "sent_posts.pkl"# –§–∞–π–ª –¥–∞–Ω–Ω—ã–º–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–∞—Ö
MAX_POSTS = 70 #–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
BASE_DIR = os.path.dirname(os.path.abspath(__file__))  # –ü–∞–ø–∫–∞, –≥–¥–µ –ª–µ–∂–∏—Ç main.py
if platform.system() == "Windows": # FFmpeg –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏
    FFMPEG_PATH = os.path.join(BASE_DIR, "lib", "ffmpeg.exe") #https://ffmpeg.org/download.html
    if not os.path.exists(FFMPEG_PATH):
        raise FileNotFoundError(f"FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {FFMPEG_PATH}, —Å–∫–∞—á–∞–π –µ–≥–æ: https://ffmpeg.org/download.html")
else:
    FFMPEG_PATH = "ffmpeg"  # –í Linux ffmpeg –¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH, –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç (apt install ffmpeg)


posts = []  # –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã
sent_posts = defaultdict(lambda: deque(maxlen=MAX_POSTS))  # ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ (–æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–∞–π—Ç–∞) —Å –∞–≤—Ç–æ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã (—É–±–∏—Ä–∞–µ–º –æ—à–∏–±–∫—É timeout)
request = HTTPXRequest(connect_timeout=60, read_timeout=60)
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN, request=request)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç

#–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ sent_posts –∏–∑ —Ñ–∞–π–ª–∞ SAVE_FILE
async def load_sent_posts():
    global sent_posts
    try:
        async with aiofiles.open(SAVE_FILE, "rb") as file:
            content = await file.read()  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ–º —Ñ–∞–π–ª
            if content:
                loaded_data = pickle.loads(content)  # –î–µ—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ defaultdict —Å deque
                sent_posts = defaultdict(lambda: deque(maxlen=MAX_POSTS),
                                         {key: deque(value, maxlen=MAX_POSTS) for key, value in loaded_data.items()})
                print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                #print(f"sent_posts: {sent_posts}")
    except FileNotFoundError:
        print("–§–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ—Å—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ: {e}")
#–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ sent_posts –≤ —Ñ–∞–π–ª SAVE_FILE
async def save_sent_posts():
    print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
    #print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ: {sent_posts}")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º defaultdict –≤ –æ–±—ã—á–Ω—ã–π dict, –∏–Ω–∞—á–µ pickle –Ω–µ —Å–º–æ–∂–µ—Ç –µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    normal_dict = {key: list(value) for key, value in sent_posts.items()}
    try:
        async with aiofiles.open(SAVE_FILE, "wb") as file:
            await file.write(pickle.dumps(normal_dict))
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
async def save_post(post_id, post_url, title, file_url,tag):
    if post_id in sent_posts[tag] or any(post["post_id"] == post_id for post in posts):
        #print(f"–ü–æ—Å—Ç {post_id} —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return

    posts.append({
        "post_id": post_id,
        "post_url": post_url,
        "title": html.escape(title),
        "file_url": file_url,
        "tag": tag,
        "send": "not"
    })
    #print(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å—Ç {post_id}")

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–æ–≤ –≤ –¢–µ–ª–µ–≥—Ä–∞–º
async def send_posts():
    global posts

    if not posts:
        #print("–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
        await clear_data_folder() #–ï—Å–ª–∏ –≤—Å–µ –ø–æ—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã, —Ç–æ —Å–∫–∞—á–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª—è—Ç—å
        return

    for post in posts[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–∑–º–µ–Ω—è—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª
        first = True
        media_group = []
        animations = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è GIF-–∞–Ω–∏–º–∞—Ü–∏–π

        caption_full = f'<a href="{post['post_url']}">–ü–æ—Å—Ç {post['post_id']}</a> : {post['title']}'  # –≠—Ç–∞ –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–æ—Å—Ç
        caption_post = caption_full[:LIMIT_CAPTION] + "..." if len(caption_full) > LIMIT_CAPTION else caption_full #–û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É Caption –µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –ª–∏–º–∏—Ç–∞
        ext_file = get_file_extension(post['file_url'])

        #–ö–∞—Ä—Ç–∏–Ω–∫–∏
        if ext_file in("jpeg","jpg","png"):
            match post["send"]:
                case "not": # –§–∞–π–ª –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è
                    media_group.append(InputMediaPhoto(media=post["file_url"],
                                            caption=caption_post if first else None,
                                            parse_mode="HTML"))
                case "err": # –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏, –±—ã–ª–∞ –æ—à–∏–±–∫–∞
                    downloaded_file = await download_media(post["file_url"])
                    with open(downloaded_file, 'rb') as file:
                        if downloaded_file:
                            media_group.append(InputMediaPhoto(
                                media=file.read(),
                                caption=caption_post if first else None,
                                parse_mode="HTML"))
        #–í–∏–¥–µ–æ
        elif ext_file == "mp4":
            match post["send"]:
                case "not":
                    media_group.append(InputMediaVideo(media=post["file_url"],
                                                       caption=caption_post if first else None,
                                                       parse_mode="HTML"))
                case "err":
                    downloaded_file = await download_media(post["file_url"])
                    with open(downloaded_file, 'rb') as file:
                        if downloaded_file:
                            media_group.append(InputMediaVideo(
                                media=file.read(),
                                caption=caption_post if first else None,
                                parse_mode="HTML"))
        #GIF —Ñ–∞–π–ª—ã
        elif ext_file == "gif":
            match post["send"]:
                case "not":
                    animations.append(post["file_url"])
                case "err": #GIF —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–≥–¥–∞ –∫–∞—á–∞–µ–º –º—ã –µ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –≤–∏–¥–µ–æ MP4
                    downloaded_file = await download_media(post["file_url"])
                    with open(downloaded_file, 'rb') as file:
                        if downloaded_file:
                            media_group.append(InputMediaVideo(
                                media=file.read(),
                                caption=caption_post if first else None,
                                parse_mode="HTML"))
        else:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã

        first = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

        if media_group:
            try:#–û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —Ñ–∞–π–ª–æ–≤
                    await bot.send_media_group(chat_id=TELEGRAM_CHAT_ID, media=media_group)
                    post["send"] = "yes"
            except Exception as e:
                if post["send"] == "not":
                    post["send"] = "err"
                else:
                    post["send"] = "close"
                    # –†–∞–∑ –Ω–∏–∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏ –µ–≥–æ —Ç–µ–≥–∏
                    caption_dont_send = f'<a href="{post['file_url']}">üñº –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤–æ—Ç —Å—Å—ã–ª–∫–∞</a> \n\n {caption_post}'
                    caption_dont = caption_dont_send[:LIMIT_CAPTION] + "..." if len(caption_dont_send) > LIMIT_CAPTION else caption_dont_send  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É Caption –µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –ª–∏–º–∏—Ç–∞
                    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=caption_dont, parse_mode="HTML")
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post['post_id']}: {e}")

        if animations:
            try:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π GIF –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
                    for animation in animations:
                        await bot.send_animation(chat_id=TELEGRAM_CHAT_ID, animation=animation,
                                                 caption=caption_post,
                                                 parse_mode="HTML")
                        post["send"] = "yes"
            except Exception as e:
                if post["send"] == "not":
                        post["send"] = "err"
                else:
                    post["send"] = "close"
                    #–†–∞–∑ –Ω–∏–∫–∞–∫ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—Ç —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –∏ –µ–≥–æ —Ç–µ–≥–∏
                    caption_dont_send = f'<a href="{post['file_url']}">üñº –§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤–æ—Ç —Å—Å—ã–ª–∫–∞</a> \n\n {caption_post}'
                    caption_dont = caption_dont_send[:LIMIT_CAPTION] + "..." if len(caption_dont_send) > LIMIT_CAPTION else caption_dont_send  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω—É Caption –µ—Å–ª–∏ –¥–æ—Ö–æ–¥–∏—Ç –¥–æ –ª–∏–º–∏—Ç–∞
                    await bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=caption_dont, parse_mode="HTML")
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Å—Ç–∞ {post['post_id']}: {e}")


        if post["send"] in {"yes", "close"}:
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª—è–µ–º –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
            sent_posts[post["tag"]].append(post["post_id"])  # –ø–æ–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            posts.remove(post)  # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
        await asyncio.sleep(10)  # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª

# –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ DATA_FOLDER, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å.
async def clear_data_folder():
    if os.path.exists(DATA_FOLDER):
        for file in os.listdir(DATA_FOLDER):
            file_path = os.path.join(DATA_FOLDER, file)
            try:
                os.remove(file_path)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ {file_path}: {e}")

#–°–∂–∞—Ç–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ MAX_SIZE_IMG_MB
async def compress_image(image_bytes, max_size=MAX_SIZE_IMG_MB * 1024 * 1024):
    img = Image.open(BytesIO(image_bytes))
    img = img.convert("RGB")  # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
    output = BytesIO()

    quality = 85  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ JPEG
    while True:
        output.seek(0)
        img.save(output, format="JPEG", quality=quality)
        if output.tell() <= max_size or quality <= 10:
            break
        quality -= 5  # –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ

    return output.getvalue()

#–°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFMPEG
async def compress_video(input_path, output_path):
    print(f"–°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ: {input_path} -> {output_path}")

    command = [
        FFMPEG_PATH, "-y", "-i", input_path,
        "-vcodec", "libx264", "-crf", "28", "-preset", "fast",
        "-b:v", "1M", output_path
    ]

    process = await asyncio.create_subprocess_exec(
        *command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )

    stdout, stderr = await process.communicate()

    if process.returncode == 0:
        print(f"–°–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {output_path}")
    else:
        print(f"–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è! {stderr.decode()}")

    return os.path.exists(output_path)

#–§—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ Gif –≤ Mp4
async def gif_to_mp4(input_path, output_path):
    ffmpeg.input(input_path).output(
        output_path, vcodec="libx264", crf=28, preset="fast"
    ).run(overwrite_output=True)
    return output_path

#–°–∫–∞—á–∏–≤–∞–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫ —Å–æ —Å–∂–∞—Ç–∏–µ–º
async def download_media(url):
    headers = {  # –î–µ–ª–∞–µ–º —à–∞–ø–∫—É —á—Ç–æ–±—ã –Ω–µ —Ä—É–≥–∞–ª—Å—è –∏ –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ñ–∞–π–ª–∞–º
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/122.0.0.0",
        "Accept": "*/*",
        "Accept-Language": "en-US,en;q=0.9,ru;q=0.8",
        "Referer": url,  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º URL
        "DNT": "1",
        "Upgrade-Insecure-Requests": "1",
        "Connection": "keep-alive",
    }

    ext = get_file_extension(url)
    if ext == "jpg": ext = "JPEG"  # Pillow –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç "JPG", —Ç–æ–ª—å–∫–æ "JPEG"
    filename = f"temp_{url.split('/')[-1].lower()}"
    os.makedirs(DATA_FOLDER, exist_ok=True)  # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É Data, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    file_path = os.path.join(DATA_FOLDER, filename)

    async with aiohttp.ClientSession() as session:
        async with session.get(url, headers=headers) as response:
            if response.status == 200:
                file_bytes = await response.read()  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã

                if ext in ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp']:
                    compressed_bytes = await compress_image(file_bytes)
                    with open(file_path, 'wb') as img_file:
                        img_file.write(compressed_bytes)

                elif ext in ['mp4', 'avi', 'mov', 'mkv', 'webm', 'gif']:
                    temp_path = file_path + "_temp" #–§–∞–π–ª —Å–ø–µ—Ä–≤–∞ —Å–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∫ _temp
                    async with aiofiles.open(temp_path, 'wb') as file:
                        await file.write(file_bytes)
                    if ext == "gif":  # –í—Å–µ–≥–¥–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º GIF ‚Üí MP4
                        compressed_path = file_path.replace(".gif", ".mp4")
                        await gif_to_mp4(temp_path, compressed_path)
                    elif os.path.getsize(temp_path) < MAX_SIZE_VIDEO_MB * 1024 * 1024:  # –°–∂–∞—Ç–∏–µ –≤–∏–¥–µ–æ –¥–æ MAX_SIZE_VIDEO_MB
                        print(f"–í–∏–¥–µ–æ {temp_path} –º–µ–Ω—å—à–µ {MAX_SIZE_VIDEO_MB} –ú–ë, —Å–∂–∞—Ç–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")
                        compressed_path = temp_path  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å
                    else:
                        compressed_path = file_path
                        await compress_video(temp_path, compressed_path)

                    os.rename(compressed_path, file_path) # –ê –ø–æ—Ç–æ–º –∫–∞–∫ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–º —Å–¥–µ–ª–∞–Ω—ã –º—ã –µ–≥–æ –ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º, —É–¥–∞–ª—è–µ–º _temp
                else:
                    print("–û—à–∏–±–∫–∞: –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
                    return None

                return file_path
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {response.status}")
    return None

# –£–∑–Ω–∞–µ–º –∫–∞–∫–æ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è —Ñ–∞–π–ª –ø–æ —Å—Å—ã–ª–∫–µ
def get_file_extension(url):
    parsed_url = urlparse(url)
    path = parsed_url.path.strip('/')  # –î–æ—Å—Ç–∞–µ–º –ø—É—Ç—å –∏–∑ —Å—Å—ã–ª–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–ª—ç—à–∏
    parts = path.rsplit('.', 1)  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç–æ—á–∫–µ –Ω–∞ —á–∞—Å—Ç–∏

    if len(parts) == 2 and parts[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ (—Ç.–µ. —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 2 —á–∞—Å—Ç–µ–π) –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        return parts[1].lower()
    return ""  # –ï—Å–ª–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É


async def fetch_html(url):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å–∞–π—Ç—É."""
    async with aiohttp.ClientSession(headers=HEADERS) as session:
        async with session.get(url) as response:
            if response.status == 200:
                return await response.json()
            else:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∞–π—Ç–∞: {response.status}")
                return None  # –í–µ—Ä–Ω–µ–º None, –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤
async def monitor_website_34():
    try:
        viewed_tags = ""
        for tag in TAGS_34:
            html = await fetch_html(f"{WEBSITE_34}{tag}{viewed_tags}&limit={LIMIT}&json=1")
            viewed_tags =  f"{viewed_tags}+-{tag}"
            if not html:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å HTML, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            for post in html:
                post_id = post["id"]
                if post_id not in sent_posts[tag]:
                    file_url = post["file_url"]
                    post_url = f"{POST_URL_34}{post_id}"
                    title = post["tags"]
                    await save_post(post_id, post_url, title, file_url, tag)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        print("–û—à–∏–±–∫–∞ –≤ –ø–æ—Å—Ç–µ: " + str(post_id))

    # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥

async def main():
    await load_sent_posts()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
    try:
        while True:
            await monitor_website_34()
            await send_posts()
            await asyncio.sleep(60)  # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("–ë–æ—Ç –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...")
    finally:
        await save_sent_posts()  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
        await clear_data_folder() # –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
